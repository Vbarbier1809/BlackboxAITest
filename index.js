#!/usr/bin/env node

const { Octokit } = require('@octokit/rest');
const axios = require('axios');

async function getBlackboxReview(code) {
  try {
    const response = await axios.post('https://api.blackbox.ai/api/chat', {
      messages: [
        {
          role: 'user',
          content: `Review this code for naming conventions, best practices, and suggest improvements. Focus on variable names, function names, class names, and overall code structure. Provide specific suggestions for better naming:\n\n${code}`
        }
      ],
      model: 'gpt-4',
      max_tokens: 1000
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.BLACKBOX_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('Error calling Blackbox API:', error.message);
    return 'Unable to get AI review at this time.';
  }
}

async function reviewPR() {
  const octokit = new Octokit({
    auth: process.env.GITHUB_TOKEN
  });

  const { GITHUB_REPOSITORY, GITHUB_PR_NUMBER } = process.env;
  const [owner, repo] = GITHUB_REPOSITORY.split('/');

  try {
    // Get PR details
    const { data: pr } = await octokit.pulls.get({
      owner,
      repo,
      pull_number: parseInt(GITHUB_PR_NUMBER)
    });

    // Get PR files
    const { data: files } = await octokit.pulls.listFiles({
      owner,
      repo,
      pull_number: parseInt(GITHUB_PR_NUMBER)
    });

    let reviewComments = [];

    for (const file of files) {
      if (file.filename.endsWith('.js') || file.filename.endsWith('.py') || file.filename.endsWith('.ts')) {
        // Get file content
        const { data: fileContent } = await octokit.repos.getContent({
          owner,
          repo,
          path: file.filename,
          ref: pr.head.sha
        });

        const code = Buffer.from(fileContent.content, 'base64').toString('utf-8');

        // Get AI review
        const aiReview = await getBlackboxReview(code);

        reviewComments.push(`## Review for ${file.filename}\n\n${aiReview}\n\n---\n`);
      }
    }

    if (reviewComments.length > 0) {
      const reviewBody = `### AI Naming and Code Review\n\n${reviewComments.join('\n')}\n\n*This review was generated by Blackbox AI.*`;

      await octokit.pulls.createReview({
        owner,
        repo,
        pull_number: parseInt(GITHUB_PR_NUMBER),
        body: reviewBody,
        event: 'COMMENT'
      });

      console.log('AI review posted successfully');
    } else {
      console.log('No code files found to review');
    }
  } catch (error) {
    console.error('Error reviewing PR:', error.message);
  }
}

if (require.main === module) {
  reviewPR();
}

module.exports = { getBlackboxReview, reviewPR };
